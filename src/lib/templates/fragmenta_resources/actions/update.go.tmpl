package [[ .fragmenta_resource ]]actions

import (
	"net/http"

	"github.com/fragmenta/model/url"
	"github.com/fragmenta/router"
	"github.com/fragmenta/view"

	"[[ .fragmenta_app_path ]]/[[ .fragmenta_resources ]]"
    "[[ .fragmenta_app_path ]]/lib/authorise"
)

// HandleUpdateShow renders the form to update a [[ .fragmenta_resource ]]
func HandleUpdateShow(context router.Context) {
	// Setup context for template
	view := view.New(context)

	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(context.ParamInt("id"))
	if err != nil {
		context.Logf("#error finding [[ .fragmenta_resource ]] %s", err)
		view.RenderStatus(context, http.StatusNotFound)
		return
	}

	// Authorize
	if !authorise.PathAndResource(context,[[ .fragmenta_resource ]]) {
		view.RenderStatus(context, http.StatusUnauthorized)
		return
	}

	view.AddKey("[[ .fragmenta_resource ]]", [[ .fragmenta_resource ]])

	view.Render(context)
}

// HandleUpdateShow handles the POST of the form to update a [[ .fragmenta_resource ]]
func HandleUpdate(context router.Context) {
	// Setup context for template
	view := view.New(context)

	// Find the [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(context.ParamInt("id"))
	if err != nil {
		context.Logf("#error finding [[ .fragmenta_resource ]] %s", err)
		view.RenderStatus(context, http.StatusNotFound)
		return
	}

	// Authorize
	if !authorise.PathAndResource(context,[[ .fragmenta_resource ]]) {
		view.RenderStatus(context, http.StatusUnauthorized)
		return
	}

	// Update the [[ .fragmenta_resource ]]
	params, err := context.Params()
	if err != nil {
		view.RenderError(context, err)
		return
	}

	err = [[ .fragmenta_resource ]].Update(params.Map())
    if err != nil {
		view.RenderError(context, err)
		return
	}


	// Redirect to [[ .fragmenta_resource ]]
	router.Redirect(context, url.Show([[ .fragmenta_resource ]]) )
}
